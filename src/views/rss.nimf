#? stdtmpl(subsChar = '$', metaChar = '#')
## SPDX-License-Identifier: AGPL-3.0-only
#import strutils, xmltree, strformat, options, unicode, algorithm
#import ../types, ../utils, ../formatters, ../prefs
#
#proc getTitle(tweet: Tweet; retweet: string): string =
#if tweet.pinned: result = "Pinned: "
#elif retweet.len > 0: result = &"RT by @{retweet}: "
#elif tweet.reply.len > 0: result = &"R to @{tweet.reply[0]}: "
#end if
#var text = stripHtml(tweet.text)
##if unicode.runeLen(text) > 32:
##  text = unicode.runeSubStr(text, 0, 32) & "..."
##end if
#result &= xmltree.escape(text)
#if result.len > 0: return
#end if
#if tweet.photos.len > 0:
#  result &= "Image"
#elif tweet.video.isSome:
#  result &= "Video"
#elif tweet.gif.isSome:
#  result &= "Gif"
#end if
#end proc
#
#proc getDescription(desc: string; cfg: Config): string =
Twitter feed for: ${desc}. Generated by ${cfg.hostname}
#end proc
#
#proc renderRssTweet(tweet: Tweet; cfg: Config): string =
#let tweet = tweet.retweet.get(tweet)
#let twitterLinks = cfg.twitterLinkInRss
#let urlPrefix = if twitterLinks: &"{https}{twitter}"
#                else: getUrlPrefix(cfg)
#let text = replaceUrls(tweet.text, defaultPrefs, absolute=urlPrefix)
<p>${text.replace("\n", "<br>\n")}</p>
#if tweet.quote.isSome and get(tweet.quote).available:
#  let quoteLink = if twitterLinks: getLink(get(tweet.quote), false)
#                  else: getLink(get(tweet.quote))
<p><a href="${urlPrefix}${quoteLink}">${urlPrefix}${quoteLink}</a></p>
#end if
#if tweet.photos.len > 0:
#  for photo in tweet.photos:
#    let url = if twitterLinks: getTwitterPicUrl(photo)
#              else: &"{urlPrefix}{getPicUrl(photo)}"
<img src="${url}" style="max-width:250px;" />
#  end for
#end if
#if tweet.video.isSome:
#  let video = get(tweet.video)
#  let thumb = if twitterLinks: getTwitterPicUrl(video.thumb)
#              else: &"{urlPrefix}{getPicUrl(video.thumb)}"
#  let isMp4 = video.variants.anyIt(it.contentType == mp4)
#  let playbackType = if not defaultPrefs.proxyVideos and isMp4: mp4
#                     else: video.playbackType
#  let vidUrl = video.variants.filterIt(it.contentType == playbackType).sortedByIt(it.resolution)[^1].url
#  let url = if defaultPrefs.proxyVideos and not twitterLinks: getVidUrl(vidUrl)
#            else: vidUrl
#  if isMp4:
<video poster="${thumb}" style="max-width:250px;">
  <source src="${url}" type="video/mp4">
</video>
#  else:
<video poster="${thumb}" data-url="${url}" style="max-width:250px;"/>
#  end if
#end if
#if tweet.gif.isSome:
#  let gif = get(tweet.gif)
#  let thumb = if twitterLinks: getTwitterPicUrl(gif.thumb)
#              else: &"{urlPrefix}{getPicUrl(gif.thumb)}"
#  let url = if twitterLinks: getTwitterPicUrl(gif.url)
#            else: &"{urlPrefix}{getPicUrl(gif.url)}"
<video poster="${thumb}" autoplay muted loop style="max-width:250px;">
  <source src="${url}" type="video/mp4">
</video>
#end if
#if tweet.card.isSome:
#  let card = tweet.card.get()
#  if card.image.len > 0:
#    let url = if twitterLinks: getTwitterPicUrl(card.image)
#              else: &"{urlPrefix}{getPicUrl(card.image)}"
<img src="${url}" style="max-width:250px;" />
#  end if
#end if
#end proc
#
#proc renderRssTweets(tweets: seq[Tweets]; cfg: Config; userId=""): string =
#let urlPrefix = if cfg.twitterLinkInRss: &"{https}{twitter}"
#                else: getUrlPrefix(cfg)
#var links: seq[string]
#for thread in tweets:
#  for tweet in thread:
#    if userId.len > 0 and tweet.user.id != userId: continue
#    end if
#
#    let retweet = if tweet.retweet.isSome: tweet.user.username else: ""
#    let tweet = if retweet.len > 0: tweet.retweet.get else: tweet
#    let link = if cfg.twitterLinkInRss: getLink(tweet, false)
#               else: getLink(tweet)
#    if link in links: continue
#    end if
#    links.add link
      <item>
        <title>${getTitle(tweet, retweet)}</title>
        <dc:creator>@${tweet.user.username}</dc:creator>
        <description><![CDATA[${renderRssTweet(tweet, cfg).strip(chars={'\n'})}]]></description>
        <pubDate>${getRfc822Time(tweet)}</pubDate>
        <guid>${urlPrefix & link}</guid>
        <link>${urlPrefix & link}</link>
      </item>
#  end for
#end for
#end proc
#
#proc renderTimelineRss*(profile: Profile; cfg: Config; multi=false): string =
#let urlNitterPrefix = getUrlPrefix(cfg)
#let urlPrefix = if cfg.twitterLinkInRss: &"{https}{twitter}"
#                else: urlNitterPrefix
#result = ""
#let handle = (if multi: "" else: "@") & profile.user.username
#let userPicUrl = if cfg.twitterLinkInRss: getTwitterPicUrl(profile.user.getUserPic(style="_400x400"))
#                 else: &"{urlPrefix}{getPicUrl(profile.user.getUserPic(style=\"_400x400\"))}"
#var title = profile.user.fullname
#if not multi: title &= " / " & handle
#end if
#title = xmltree.escape(title).sanitizeXml
<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="${urlNitterPrefix}/${profile.user.username}/rss" rel="self" type="application/rss+xml" />
    <title>${title}</title>
    <link>${urlPrefix}/${profile.user.username}</link>
    <description>${getDescription(handle, cfg)}</description>
    <language>en-us</language>
    <ttl>40</ttl>
    <image>
      <title>${title}</title>
      <link>${urlPrefix}/${profile.user.username}</link>
      <url>${userPicUrl}</url>
      <width>128</width>
      <height>128</height>
    </image>
#if profile.tweets.content.len > 0:
${renderRssTweets(profile.tweets.content, cfg, userId=profile.user.id)}
#end if
  </channel>
</rss>
#end proc
#
#proc renderListRss*(tweets: seq[Tweets]; list: List; cfg: Config): string =
#let nitterLink = &"{getUrlPrefix(cfg)}/i/lists/{list.id}"
#let link = if cfg.twitterLinkInRss: &"{https}{twitter}/i/lists/{list.id}"
#           else: nitterLink
#result = ""
<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="${nitterLink}" rel="self" type="application/rss+xml" />
    <title>${xmltree.escape(list.name)} / @${list.username}</title>
    <link>${link}</link>
    <description>${getDescription(&"{list.name} by @{list.username}", cfg)}</description>
    <language>en-us</language>
    <ttl>40</ttl>
${renderRssTweets(tweets, cfg)}
 </channel>
</rss>
#end proc
#
#proc renderSearchRss*(tweets: seq[Tweets]; name, param: string; cfg: Config): string =
#let nitterLink = &"{getUrlPrefix(cfg)}/search"
#let link = if cfg.twitterLinkInRss: &"{https}{twitter}/search"
#           else: nitterLink
#let escName = xmltree.escape(name)
#result = ""
<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="${nitterLink}" rel="self" type="application/rss+xml" />
    <title>Search results for "${escName}"</title>
    <link>${link}</link>
    <description>${getDescription(&"Search \"{escName}\"", cfg)}</description>
    <language>en-us</language>
    <ttl>40</ttl>
${renderRssTweets(tweets, cfg)}
  </channel>
</rss>
#end proc
